valgrind ./test_turtle
==3770== Memcheck, a memory error detector
==3770== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==3770== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==3770== Command: ./test_turtle
==3770== 


     CUnit - A unit testing framework for C - Version 2.1-3
     http://cunit.sourceforge.net/


Suite: 1 - #define str_same (turtle_parser.h)
  Test: the return value when strings are not the same (ie, should be False). ...passed
  Test: the return value when strings are the same (ie, should be True). ...passed
Suite: 2 - is_op (turtle_parser.c)
  Test: test False returned when operation is too long (ie, when length > 1). ...passed
  Test: test False returned when operation is incorrect - v1. ...passed
  Test: test False returned when operation is incorrect - v2. ...passed
  Test: test False returned when operation is incorrect - v3. ...passed
  Test: test False returned when operation is incorrect - v4. ...passed
  Test: test False returned when operation is incorrect - v5. ...passed
  Test: test True returned for all possible (ie, defined by grammar) operations. ...passed
Suite: 3 - a_variable_name  (turtle_parser.h)
  Test: test zero returned when operation is incorrect - v1. ...passed
  Test: test zero returned when operation is incorrect - v2. ...passed
  Test: test zero returned when operation is incorrect - v3. ...passed
  Test: test zero returned when operation is incorrect - v4. ...passed
  Test: test zero returned when operation is incorrect - v5. ...passed
  Test: test one returned for all correct (ie, set by grammar) names. ...passed
Suite: 4 - is_var (turtle_parser.c)
  Test: test false returned when operation is too long (ie, when length > 1). ...passed
  Test: test False returned when variable name is incorrect - v1. ...passed
  Test: test False returned when variable name is incorrect - v2. ...passed
  Test: test False returned when variable name is incorrect - v3. ...passed
  Test: test False returned when variable name is incorrect - v4. ...passed
  Test: test False returned when variable name is incorrect - v5. ...passed
  Test: test true returned for all possible and correct variable names. ...passed
Suite: 5 - is_negative (turtle_parser.h)
  Test: test False returned when variable name is incorrect - v1. ...passed
  Test: test False returned when variable name is incorrect - v2. ...passed
  Test: test False returned when variable name is incorrect - v3. ...passed
  Test: test False returned when variable name is incorrect - v4. ...passed
  Test: test False returned when variable name is incorrect - v5. ...passed
  Test: test true returned for all possible and correct variable names. ...passed
Suite: 6 - #define more_than_one_decimal_or_negative (turtle_parser.h)
  Test: test True returned for invalid combination - v1. ...passed
  Test: test True returned for invalid combination - v2. ...passed
  Test: test True returned for invalid combination - v3. ...passed
  Test: test True returned for invalid combination - v4. ...passed
  Test: test True returned for invalid combination - v5. ...passed
  Test: test False returned for valid combination - type 1. ...passed
  Test: test False returned for valid combination - type 2. ...passed
  Test: test False returned for valid combination - type 3. ...passed
  Test: test False returned for valid combination - type 4. ...passed
Suite: 7 - is_num (turtle_parser.c)
  Test: test False returned when string is not a number - v1. ...passed
  Test: test False returned when string is not a number - v2. ...passed
  Test: test False returned when string is not a number - v3. ...passed
  Test: test False returned when string is not a number - v4. ...passed
  Test: test False returned when string is not a number - v5. ...passed
  Test: test Number returned when string is a number an integer. ...passed
  Test: test Number returned value when string is a negative integer. ...passed
  Test: test Number returned value when string non-negative decimal. ...passed
  Test: test Number returned when string is a negative floating point - v1. ...passed
  Test: test Number returned when string is a negative floating point - v2. ...passed
Suite: 8 - is_var_or_num (turtle_parser.c)
  Test: test False returned when string is not a number (1). ...passed
  Test: test False returned when string is not a number (2). ...passed
  Test: test False returned when string is not a number (3). ...passed
  Test: test False returned when string is not a number (4). ...passed
  Test: test False returned when number is negative. ...passed
  Test: test False returned when string is not a variable (1). ...passed
  Test: test False returned when string is not a variable (2). ...passed
  Test: test False returned when string is not a variable (3). ...passed
  Test: test False returned when string is not a variable (4). ...passed
  Test: test Number returned for a non-negative integer. ...passed
  Test: test Number returned for a negative integer. ...passed
  Test: test Number returned for a non-negative floating point. ...passed
  Test: test Number returned for a negative floating point - v1. ...passed
  Test: test Number returned for a negative floating point - v2. ...passed
  Test: test Variable returned for all possible variable names. ...passed
Suite: 9 - is_pointer_null (turtle_parser_setup.c)
  Test: for pointers of type: void. ...passed
  Test: for pointers of type: int. ...passed
  Test: for pointers of type: unsigned int. ...passed
  Test: for pointers of type: char. ...passed
  Test: for pointers of type: char *. ...passed
  Test: for pointers of type: Prog. ...passed
Suite: 10 - memory_for_Prog (turtle_parser_setup.c)
  Test: that returned pointer is not null. ...passed
  Test: returned pointer has correct size. ...passed
Suite: 11 - memory_for_string (turtle_parser_setup.c)
  Test: that returned pointer is not null. ...passed
  Test: returned pointer has correct size. ...passed
  Test: that calloc worked correctly. ...passed
  Test: that pointer of correct type (can store string). ...passed
Suite: 12 - memory_for_program (turtle_parser_setup.c)
  Test: that returned pointer is not null. ...passed
  Test: returned pointer has correct size. ...passed
  Test: that calloc worked correctly. ...passed
  Test: that variable can store correct amount of strings). ...passed
Suite: 13 - open_file (turtle_parser_setup.c)
  Test: that function flags when null pointer returned. ...passed
  Test: that function returns correct value when file successfully opened. ...passed
  Test: that function returns a non-null pointer when file successfully opened. ...passed
  Test: that file is readable and behaves appropriately. ...passed
  Test: that file is not writable. ...passed
Suite: 14 - close_file (turtle_parser_setup.c)
  Test: that function returns correct value when file successfully closed. ...passed
  Test: that file is actually closed (when function doesn't that it isn't). ...passed
Suite: 15 - string_length_too_long (turtle_parser_setup.c)
  Test: that function returns False when string within bounds. ...passed
  Test: that function returns True when string out of bounds. ...passed
Suite: 16 - number_of_strings_in_file (turtle_parser_setup.c)
  Test: that function returns zero for an empty file. ...passed
  Test: correct amount returned for for non-empty file. ...passed
Suite: 17 - initialise_Prog(turtle_parser_setup.c)
  Test: that function does not return null char ** pointerand p->totalStrs is not changed. ...passed
  Test: that function sets p->place to correct starting value and p->totalStrs is not changed. ...passed
Suite: 18 - read_in_strings (turtle_parser_setup.c)
  Test: that function returns zero for an empty file. ...passed
  Test: correct amount returned for for non-empty file. ...passed
  Test: that function read in strings correctly. ...passed
Suite: 19 - free_program_memory(turtle_parser_setup.c)
  Test: that function correctlyfree any allocated memory in Prog ptr and sets all ptrsto null. ...passed
Suite: 20 - set_up_program(turtle_parser_setup.c)
  Test: that function does not return null Prog * pointer. ...passed
  Test: that function does not return null char ** pointer. ...passed
  Test: that function determines the num. of strings in file. ...passed
  Test: that function does not return null char * pointers. ...passed
  Test: that function correctly copies in strings from file. ...passed
  Test: that function correctly set place in file (0). ...passed
  Test: that the function shuts the file and the file pointer to null. ...passed
Suite: 21 - is_move (turtle_parser.c)
  Test: that returns correct values when not a valid move v1 ...passed
  Test: that returns correct values when not a valid move v2 ...passed
  Test: that returns correct values when not a valid move v3 ...passed
  Test: that returns True for thevalid move of FD. ...passed
  Test: that returns True for thevalid move of LT. ...passed
  Test: that returns True for thevalid move of RT. ...passed
Suite: 22 - #define MOCK_PASSING_ERROR (turtle_errors.h)
  Test: that function correctly exits is parsing error and leaves no alloced memory ...
Parsing Error: 0 - Test to see if the #define PARSING_ERROR exit function behaves correctly.
NO ACTUAL ERROR - Print one: 1.

passed
Suite: 23 - mock_check_within_bounds(turtle_parser.c)
  Test: that function flags in place counter = number strings. ...passed
  Test: that function flags in place counter > number strings. ...passed
  Test: that return value when place counter < number strings. ...passed
Suite: 24 - mock_polish(turtle_parser.c)
  Test: that function gives parsing error when no terminating char (ie, ';'). ...passed
  Test: test that sequence of strings not matching grammar is flagged by mock (1). ...passed
  Test: test that sequence of strings not matching grammar is flagged by mock (2). ...passed
  Test: test that sequence of strings not matching grammar is flagged by mock (3). ...passed
  Test: test that sequence of strings not matching grammar is flagged by mock (4). ...passed
  Test: test recursive behaviour and exit of mock function for correct grammar (1). ...passed
  Test: test recursive behaviour and exit of mock function for correct grammar (2). ...passed
  Test: test recursive behaviour and exit of mock function for correct grammar (3). ...passed
  Test: test recursive behaviour and exit of mock function for correct grammar (4). ...passed
  Test: test recursive behaviour and exit of mock function for correct grammar (5). ...passed
Suite: 25 - mock_set(turtle_parser.c)
  Test: that function gives parsing error when no starting character (ie, "SET"). ...passed
  Test: that function gives parsing error when no variable character (ie, var in [A-Z]). ...passed
  Test: that function gives parsing error when no defining character (ie, ":="). ...passed
  Test: that function gives parsing error when no polish terminating char (ie, ";"). ...passed
  Test: that function gives parsing error when the polish grammar incorrect. ...passed
  Test: test recursive behaviour and exit of mock_set function for correct grammar (1). ...passed
  Test: test recursive behaviour and exit of mock_set function for correct grammar (2). ...passed
  Test: test recursive behaviour and exit of mock_set function for correct grammar (3). ...passed
  Test: test recursive behaviour and exit of mock_set function for correct grammar (4). ...passed
  Test: test recursive behaviour and exit of mock_set function for correct grammar (5). ...passed
Suite: 26 - mock_do_to_from (turtle_parser.c)
  Test: that function correctly flags invalid arrangement of strings (1) for DO ...passed
  Test: that function correctly flags invalid arrangement of strings (2) for DO ...passed
  Test: that function correctly flags invalid arrangement of strings (3) for DO ...passed
  Test: that function correctly flags invalid arrangement of strings (4) for DO ...passed
  Test: that function correctly flags invalid arrangement of strings (5) for DO ...passed
  Test: that function correctly flags invalid arrangement of strings (6) for DO ...passed
  Test: that function correctly flags invalid arrangement of strings (7) for DO ...passed
  Test: that behaves correctly for valid set of strings (1) ...passed
  Test: that behaves correctly for valid set of strings (2) ...passed
  Test: that behaves correctly for valid set of strings (3) ...passed
  Test: that behaves correctly for valid set of strings (3) ...passed
Suite: 27 - mock_instruction (turtle_parser.c)
  Test: that function correctly flags when no valid instruction is input 1 ...passed
  Test: that function correctly flags when no valid instruction is input 2 ...passed
  Test: that function correctly flags when no valid instruction is input 3 ...passed
  Test: that behaves correctly for valid instruction (FD) ...passed
  Test: that behaves correctly for valid instruction (LT) ...passed
  Test: that behaves correctly for valid instruction (RT) ...passed
  Test: that behaves correctly for valid instruction (DO) ...passed
  Test: that behaves correctly for valid instruction (SET) ...passed
Suite: 28 - mock_instruction_list (turtle_parser.c)
  Test: that function correctly flags invalid arrangement of strings (1) ...passed
  Test: that function correctly flags invalid arrangement of strings (2) ...passed
  Test: that function correctly flags invalid arrangement of strings (3) ...passed
  Test: that function correctly flags an empty file ...passed
  Test: that behaves correctly for valid set of strings (1) ...passed
  Test: that behaves correctly for valid set of strings (2) ...passed
  Test: that behaves correctly for valid set of strings (3) ...passed
Suite: 29 - mock_parser_program_main (turtle_parser.c)
  Test: that function flags incorrect start symbol (ie, "{") (1). ...passed
  Test: that function flags incorrect start symbol (ie, "{") (2). ...passed
  Test: that function flags incorrect start symbol (ie, "{") (3). ...passed
  Test: that function flags when the input file is empty. ...passed
  Test: that function continues correctly when start symbol (ie, "{") is first str. ...passed

Run Summary:    Type  Total    Ran Passed Failed Inactive
              suites     29     29    n/a      0        0
               tests    163    163    163      0        0
             asserts    434    434    434      0      n/a

Elapsed time =    0.252 seconds




Parsing Error: 0 - Test to see if the #define PARSING_ERROR exit function behaves correctly.
NO ACTUAL ERROR - Print one: 1.



     CUnit - A Unit testing framework for C - Version 2.1-3
             http://cunit.sourceforge.net/


***************** CUNIT CONSOLE - MAIN MENU ******************************
(R)un  (S)elect  (L)ist  (A)ctivate  (F)ailures  (O)ptions  (H)elp  (Q)uit
Enter command: q
==3770== 
==3770== HEAP SUMMARY:
==3770==     in use at exit: 0 bytes in 0 blocks
==3770==   total heap usage: 1,853 allocs, 1,853 frees, 749,359 bytes allocated
==3770== 
==3770== All heap blocks were freed -- no leaks are possible
==3770== 
==3770== For counts of detected and suppressed errors, rerun with: -v
==3770== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

